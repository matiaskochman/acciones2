// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.prediccion.acciones2;

import com.prediccion.acciones2.CompanyHistoricController;
import com.prediccion.acciones2.domain.CompanyHistoric;
import com.prediccion.acciones2.service.CompanyHistoricService;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect CompanyHistoricController_Roo_Controller_Json {
    
    @Autowired
    CompanyHistoricService CompanyHistoricController.companyHistoricService;
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CompanyHistoricController.showJson(@PathVariable("id") Long id) {
        CompanyHistoric companyHistoric = companyHistoricService.findCompanyHistoric(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (companyHistoric == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(companyHistoric.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CompanyHistoricController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<CompanyHistoric> result = companyHistoricService.findAllCompanyHistorics();
        return new ResponseEntity<String>(CompanyHistoric.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> CompanyHistoricController.createFromJson(@RequestBody String json) {
        CompanyHistoric companyHistoric = CompanyHistoric.fromJsonToCompanyHistoric(json);
        companyHistoricService.saveCompanyHistoric(companyHistoric);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> CompanyHistoricController.createFromJsonArray(@RequestBody String json) {
        for (CompanyHistoric companyHistoric: CompanyHistoric.fromJsonArrayToCompanyHistorics(json)) {
            companyHistoricService.saveCompanyHistoric(companyHistoric);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> CompanyHistoricController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        CompanyHistoric companyHistoric = CompanyHistoric.fromJsonToCompanyHistoric(json);
        if (companyHistoricService.updateCompanyHistoric(companyHistoric) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> CompanyHistoricController.deleteFromJson(@PathVariable("id") Long id) {
        CompanyHistoric companyHistoric = companyHistoricService.findCompanyHistoric(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (companyHistoric == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        companyHistoricService.deleteCompanyHistoric(companyHistoric);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
