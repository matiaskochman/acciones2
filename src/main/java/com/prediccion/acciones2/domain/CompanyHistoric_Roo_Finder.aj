// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.prediccion.acciones2.domain;

import com.prediccion.acciones2.domain.CompanyHistoric;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CompanyHistoric_Roo_Finder {
    
    public static Long CompanyHistoric.countFindCompanyHistoricsByCompanyIdEquals(String companyId) {
        if (companyId == null || companyId.length() == 0) throw new IllegalArgumentException("The companyId argument is required");
        EntityManager em = CompanyHistoric.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CompanyHistoric AS o WHERE o.companyId = :companyId", Long.class);
        q.setParameter("companyId", companyId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CompanyHistoric.countFindCompanyHistoricsByCompanyIdEqualsAndFechaCreacionEquals(String companyId, Date fechaCreacion) {
        if (companyId == null || companyId.length() == 0) throw new IllegalArgumentException("The companyId argument is required");
        if (fechaCreacion == null) throw new IllegalArgumentException("The fechaCreacion argument is required");
        EntityManager em = CompanyHistoric.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CompanyHistoric AS o WHERE o.companyId = :companyId  AND o.fechaCreacion = :fechaCreacion", Long.class);
        q.setParameter("companyId", companyId);
        q.setParameter("fechaCreacion", fechaCreacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CompanyHistoric> CompanyHistoric.findCompanyHistoricsByCompanyIdEquals(String companyId) {
        if (companyId == null || companyId.length() == 0) throw new IllegalArgumentException("The companyId argument is required");
        EntityManager em = CompanyHistoric.entityManager();
        TypedQuery<CompanyHistoric> q = em.createQuery("SELECT o FROM CompanyHistoric AS o WHERE o.companyId = :companyId", CompanyHistoric.class);
        q.setParameter("companyId", companyId);
        return q;
    }
    
    public static TypedQuery<CompanyHistoric> CompanyHistoric.findCompanyHistoricsByCompanyIdEquals(String companyId, String sortFieldName, String sortOrder) {
        if (companyId == null || companyId.length() == 0) throw new IllegalArgumentException("The companyId argument is required");
        EntityManager em = CompanyHistoric.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CompanyHistoric AS o WHERE o.companyId = :companyId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CompanyHistoric> q = em.createQuery(queryBuilder.toString(), CompanyHistoric.class);
        q.setParameter("companyId", companyId);
        return q;
    }
    
    public static TypedQuery<CompanyHistoric> CompanyHistoric.findCompanyHistoricsByCompanyIdEqualsAndFechaCreacionEquals(String companyId, Date fechaCreacion) {
        if (companyId == null || companyId.length() == 0) throw new IllegalArgumentException("The companyId argument is required");
        if (fechaCreacion == null) throw new IllegalArgumentException("The fechaCreacion argument is required");
        EntityManager em = CompanyHistoric.entityManager();
        TypedQuery<CompanyHistoric> q = em.createQuery("SELECT o FROM CompanyHistoric AS o WHERE o.companyId = :companyId  AND o.fechaCreacion = :fechaCreacion", CompanyHistoric.class);
        q.setParameter("companyId", companyId);
        q.setParameter("fechaCreacion", fechaCreacion);
        return q;
    }
    
    public static TypedQuery<CompanyHistoric> CompanyHistoric.findCompanyHistoricsByCompanyIdEqualsAndFechaCreacionEquals(String companyId, Date fechaCreacion, String sortFieldName, String sortOrder) {
        if (companyId == null || companyId.length() == 0) throw new IllegalArgumentException("The companyId argument is required");
        if (fechaCreacion == null) throw new IllegalArgumentException("The fechaCreacion argument is required");
        EntityManager em = CompanyHistoric.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CompanyHistoric AS o WHERE o.companyId = :companyId  AND o.fechaCreacion = :fechaCreacion");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CompanyHistoric> q = em.createQuery(queryBuilder.toString(), CompanyHistoric.class);
        q.setParameter("companyId", companyId);
        q.setParameter("fechaCreacion", fechaCreacion);
        return q;
    }
    
}
