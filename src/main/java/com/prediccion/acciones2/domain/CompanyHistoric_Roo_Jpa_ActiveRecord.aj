// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.prediccion.acciones2.domain;

import com.prediccion.acciones2.domain.CompanyHistoric;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CompanyHistoric_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager CompanyHistoric._entityManager;
    
    public static final EntityManager CompanyHistoric.entityManager() {
        EntityManager em = new CompanyHistoric()._entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CompanyHistoric.countCompanyHistorics() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CompanyHistoric o", Long.class).getSingleResult();
    }
    
    public static List<CompanyHistoric> CompanyHistoric.findAllCompanyHistorics() {
        return entityManager().createQuery("SELECT o FROM CompanyHistoric o", CompanyHistoric.class).getResultList();
    }
    
    public static CompanyHistoric CompanyHistoric.findCompanyHistoric(Long id) {
        if (id == null) return null;
        return entityManager().find(CompanyHistoric.class, id);
    }
    
    public static List<CompanyHistoric> CompanyHistoric.findCompanyHistoricEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CompanyHistoric o", CompanyHistoric.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void CompanyHistoric.persist() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.persist(this);
    }
    
    @Transactional
    public void CompanyHistoric.remove() {
        if (this._entityManager == null) this._entityManager = entityManager();
        if (this._entityManager.contains(this)) {
            this._entityManager.remove(this);
        } else {
            CompanyHistoric attached = CompanyHistoric.findCompanyHistoric(this.id);
            this._entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CompanyHistoric.flush() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.flush();
    }
    
    @Transactional
    public void CompanyHistoric.clear() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.clear();
    }
    
    @Transactional
    public CompanyHistoric CompanyHistoric.merge() {
        if (this._entityManager == null) this._entityManager = entityManager();
        CompanyHistoric merged = this._entityManager.merge(this);
        this._entityManager.flush();
        return merged;
    }
    
}
