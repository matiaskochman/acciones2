// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.prediccion.acciones2.domain;

import com.prediccion.acciones2.domain.CompanyHistoric;
import com.prediccion.acciones2.domain.CompanyHistoricDataOnDemand;
import com.prediccion.acciones2.service.CompanyHistoricService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CompanyHistoricDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CompanyHistoricDataOnDemand: @Component;
    
    private Random CompanyHistoricDataOnDemand.rnd = new SecureRandom();
    
    private List<CompanyHistoric> CompanyHistoricDataOnDemand.data;
    
    @Autowired
    CompanyHistoricService CompanyHistoricDataOnDemand.companyHistoricService;
    
    public CompanyHistoric CompanyHistoricDataOnDemand.getNewTransientCompanyHistoric(int index) {
        CompanyHistoric obj = new CompanyHistoric();
        setCompanyId(obj, index);
        setExchange(obj, index);
        setFechaCreacion(obj, index);
        setLocalCurrencySymbol(obj, index);
        setMarket(obj, index);
        setMarketCap(obj, index);
        setMaxForecastPercentageValue(obj, index);
        setMaxForecastValue(obj, index);
        setMedForecastPercentageValue(obj, index);
        setMedForecastValue(obj, index);
        setMinForecastPercentageValue(obj, index);
        setMinForecastValue(obj, index);
        setPe(obj, index);
        setPrice52WeekPercChange(obj, index);
        setRecomendacionAverage(obj, index);
        setRecomendacionAverage_last_year(obj, index);
        setRecomendacionBuy(obj, index);
        setRecomendacionBuy_last_year(obj, index);
        setRecomendacionHold(obj, index);
        setRecomendacionHold_last_year(obj, index);
        setRecomendacionNoOpinion(obj, index);
        setRecomendacionOutPerform(obj, index);
        setRecomendacionOutPerform_last_year(obj, index);
        setRecomendacionSell(obj, index);
        setRecomendacionSell_last_year(obj, index);
        setRecomendacionUnderPerform(obj, index);
        setRecomendacionUnderPerform_last_year(obj, index);
        setStockValue(obj, index);
        setTicker(obj, index);
        setTitle(obj, index);
        setVolumenNegociado(obj, index);
        return obj;
    }
    
    public void CompanyHistoricDataOnDemand.setCompanyId(CompanyHistoric obj, int index) {
        String companyId = "companyId_" + index;
        obj.setCompanyId(companyId);
    }
    
    public void CompanyHistoricDataOnDemand.setExchange(CompanyHistoric obj, int index) {
        String exchange = "exchange_" + index;
        obj.setExchange(exchange);
    }
    
    public void CompanyHistoricDataOnDemand.setFechaCreacion(CompanyHistoric obj, int index) {
        Date fechaCreacion = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaCreacion(fechaCreacion);
    }
    
    public void CompanyHistoricDataOnDemand.setLocalCurrencySymbol(CompanyHistoric obj, int index) {
        String localCurrencySymbol = "localCurrencySymbol_" + index;
        obj.setLocalCurrencySymbol(localCurrencySymbol);
    }
    
    public void CompanyHistoricDataOnDemand.setMarket(CompanyHistoric obj, int index) {
        String market = "market_" + index;
        obj.setMarket(market);
    }
    
    public void CompanyHistoricDataOnDemand.setMarketCap(CompanyHistoric obj, int index) {
        Double marketCap = new Integer(index).doubleValue();
        obj.setMarketCap(marketCap);
    }
    
    public void CompanyHistoricDataOnDemand.setMaxForecastPercentageValue(CompanyHistoric obj, int index) {
        Double maxForecastPercentageValue = new Integer(index).doubleValue();
        obj.setMaxForecastPercentageValue(maxForecastPercentageValue);
    }
    
    public void CompanyHistoricDataOnDemand.setMaxForecastValue(CompanyHistoric obj, int index) {
        Double maxForecastValue = new Integer(index).doubleValue();
        obj.setMaxForecastValue(maxForecastValue);
    }
    
    public void CompanyHistoricDataOnDemand.setMedForecastPercentageValue(CompanyHistoric obj, int index) {
        Double medForecastPercentageValue = new Integer(index).doubleValue();
        obj.setMedForecastPercentageValue(medForecastPercentageValue);
    }
    
    public void CompanyHistoricDataOnDemand.setMedForecastValue(CompanyHistoric obj, int index) {
        Double medForecastValue = new Integer(index).doubleValue();
        obj.setMedForecastValue(medForecastValue);
    }
    
    public void CompanyHistoricDataOnDemand.setMinForecastPercentageValue(CompanyHistoric obj, int index) {
        Double minForecastPercentageValue = new Integer(index).doubleValue();
        obj.setMinForecastPercentageValue(minForecastPercentageValue);
    }
    
    public void CompanyHistoricDataOnDemand.setMinForecastValue(CompanyHistoric obj, int index) {
        Double minForecastValue = new Integer(index).doubleValue();
        obj.setMinForecastValue(minForecastValue);
    }
    
    public void CompanyHistoricDataOnDemand.setPe(CompanyHistoric obj, int index) {
        Double pe = new Integer(index).doubleValue();
        obj.setPe(pe);
    }
    
    public void CompanyHistoricDataOnDemand.setPrice52WeekPercChange(CompanyHistoric obj, int index) {
        Double price52WeekPercChange = new Integer(index).doubleValue();
        obj.setPrice52WeekPercChange(price52WeekPercChange);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionAverage(CompanyHistoric obj, int index) {
        Double recomendacionAverage = new Integer(index).doubleValue();
        obj.setRecomendacionAverage(recomendacionAverage);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionAverage_last_year(CompanyHistoric obj, int index) {
        Double recomendacionAverage_last_year = new Integer(index).doubleValue();
        obj.setRecomendacionAverage_last_year(recomendacionAverage_last_year);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionBuy(CompanyHistoric obj, int index) {
        Integer recomendacionBuy = new Integer(index);
        obj.setRecomendacionBuy(recomendacionBuy);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionBuy_last_year(CompanyHistoric obj, int index) {
        Integer recomendacionBuy_last_year = new Integer(index);
        obj.setRecomendacionBuy_last_year(recomendacionBuy_last_year);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionHold(CompanyHistoric obj, int index) {
        Integer recomendacionHold = new Integer(index);
        obj.setRecomendacionHold(recomendacionHold);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionHold_last_year(CompanyHistoric obj, int index) {
        Integer recomendacionHold_last_year = new Integer(index);
        obj.setRecomendacionHold_last_year(recomendacionHold_last_year);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionNoOpinion(CompanyHistoric obj, int index) {
        Integer recomendacionNoOpinion = new Integer(index);
        obj.setRecomendacionNoOpinion(recomendacionNoOpinion);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionOutPerform(CompanyHistoric obj, int index) {
        Integer recomendacionOutPerform = new Integer(index);
        obj.setRecomendacionOutPerform(recomendacionOutPerform);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionOutPerform_last_year(CompanyHistoric obj, int index) {
        Integer recomendacionOutPerform_last_year = new Integer(index);
        obj.setRecomendacionOutPerform_last_year(recomendacionOutPerform_last_year);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionSell(CompanyHistoric obj, int index) {
        Integer recomendacionSell = new Integer(index);
        obj.setRecomendacionSell(recomendacionSell);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionSell_last_year(CompanyHistoric obj, int index) {
        Integer recomendacionSell_last_year = new Integer(index);
        obj.setRecomendacionSell_last_year(recomendacionSell_last_year);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionUnderPerform(CompanyHistoric obj, int index) {
        Integer recomendacionUnderPerform = new Integer(index);
        obj.setRecomendacionUnderPerform(recomendacionUnderPerform);
    }
    
    public void CompanyHistoricDataOnDemand.setRecomendacionUnderPerform_last_year(CompanyHistoric obj, int index) {
        Integer recomendacionUnderPerform_last_year = new Integer(index);
        obj.setRecomendacionUnderPerform_last_year(recomendacionUnderPerform_last_year);
    }
    
    public void CompanyHistoricDataOnDemand.setStockValue(CompanyHistoric obj, int index) {
        Double stockValue = new Integer(index).doubleValue();
        obj.setStockValue(stockValue);
    }
    
    public void CompanyHistoricDataOnDemand.setTicker(CompanyHistoric obj, int index) {
        String ticker = "ticker_" + index;
        obj.setTicker(ticker);
    }
    
    public void CompanyHistoricDataOnDemand.setTitle(CompanyHistoric obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public void CompanyHistoricDataOnDemand.setVolumenNegociado(CompanyHistoric obj, int index) {
        String volumenNegociado = "volumenNegociado_" + index;
        obj.setVolumenNegociado(volumenNegociado);
    }
    
    public CompanyHistoric CompanyHistoricDataOnDemand.getSpecificCompanyHistoric(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CompanyHistoric obj = data.get(index);
        Long id = obj.getId();
        return companyHistoricService.findCompanyHistoric(id);
    }
    
    public CompanyHistoric CompanyHistoricDataOnDemand.getRandomCompanyHistoric() {
        init();
        CompanyHistoric obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return companyHistoricService.findCompanyHistoric(id);
    }
    
    public boolean CompanyHistoricDataOnDemand.modifyCompanyHistoric(CompanyHistoric obj) {
        return false;
    }
    
    public void CompanyHistoricDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = companyHistoricService.findCompanyHistoricEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CompanyHistoric' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CompanyHistoric>();
        for (int i = 0; i < 10; i++) {
            CompanyHistoric obj = getNewTransientCompanyHistoric(i);
            try {
                companyHistoricService.saveCompanyHistoric(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
